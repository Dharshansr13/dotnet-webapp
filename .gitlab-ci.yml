stages:
  - sonar
  - build
  - dockerize
  - deploy

variables:
  SONAR_SCANNER_CLI_VERSION: "5.0.1.3006"
  SONAR_TOKEN: "sqa_376078ad4f27124b517e99c94706fcd20e8dc73f"
  SONAR_HOST_URL: "http://65.2.39.233:9000"
  PROJECT_KEY: "dotnet-webapp"

before_script:
  - export PATH="$PATH:$HOME/.dotnet/tools"
  - dotnet tool install --global dotnet-sonarscanner
  - chmod 600 ~/.ssh/id_rsa

sonarqube_scan:
  stage: sonar
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet sonarscanner begin /k:"$PROJECT_KEY" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.login="$SONAR_TOKEN"
    - dotnet build
    - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

build_app:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet publish -c Release -o out

docker_build:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t dotnet-webapp-image .

deploy_to_vm:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan 65.2.39.233 >> ~/.ssh/known_hosts
  script:
    - |
      ssh ubuntu@65.2.39.233 << 'EOF'
        docker stop dotnet-webapp || true
        docker rm dotnet-webapp || true
        docker rmi dotnet-webapp-image || true
      EOF
    - docker save dotnet-webapp-image | bzip2 | ssh ubuntu@65.2.39.233 'bunzip2 | docker load'
    - ssh ubuntu@65.2.39.233 'docker run -d -p 80:80 --name dotnet-webapp dotnet-webapp-image'

