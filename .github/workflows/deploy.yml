name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0'

    - name: Build and Publish .NET App
      run: |
        docker build -t dharshansr/murali_lanister:latest .
        docker run --rm dharshansr/murali_lanister:latest

    - name: Run SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        docker run --rm \
          -v $(pwd):/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=dharshan-web-app \
          -Dsonar.sources=. \
          -Dsonar.host.url=http://65.2.39.233:9000 \
          -Dsonar.login=$SONAR_TOKEN

    - name: Build Docker Image
      run: |
        docker build -t dharshansr/murali_lanister:latest .

    - name: Push Docker Image to Docker Hub
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
        docker push dharshansr/murali_lanister:latest

    - name: Deploy to VM
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
        VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
      run: |
        echo "$VM_SSH_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem $VM_USER@$VM_HOST << 'EOF'
          docker pull dharshansr/murali_lanister:latest
          docker run -d -p 80:80 dharshansr/murali_lanister:latest
        EOF
